#define _CRT_SECURE_NO_WARNINGS

#include<stdio.h>
#include<Windows.h>
#include<conio.h>
#include<time.h>
#include<stdlib.h>
#include<stdbool.h>

#define DOWN 80
#define LEFT 75
#define RIGHT 77
#define ESCAPE 27
#define Z 90
#define z 122 
#define UP 72
#define MAPWIDTH 10
#define MAPHEIGHT 20

clock_t CurTime, OldTime;
clock_t WaitCurTime, WaitOldTime;

typedef struct _ShadowLocation
{
    int ShadowY;
    int ShadowX;

}ShadowLocation;

typedef struct _Tetris
{
    int x;        //블록 좌표
    int y;        //블록 좌표 

    int rotation;
    int randBlocks;

    bool Right;
    bool Left;

    bool save;
    int score;

}Tetris;

Tetris T;
ShadowLocation S;

int HighSaveScore;

void gotoxy(int x, int y);
void CursorView(char show);
void SetColor();

void Map();
void RandOutput();
void Delete();
void Move();

void Save();
void TimeDown();
void LineCheck();

void LineRemove(int vertical);
void LineDown(int vertical);
void Rotation();
void QuickDown();
void GameOver();
void Output();

void Explain();
void Score();
void Shadow();
void ShadowOutput();

void HighScoreSave();
void HighScoreOutput();
void Waiting();

int map[MAPHEIGHT][MAPWIDTH] = {

    {1,0,0,0,0,0,0,0,0,1},
    {1,0,0,0,0,0,0,0,0,1},
    {1,0,0,0,0,0,0,0,0,1},
    {1,0,0,0,0,0,0,0,0,1},
    {1,0,0,0,0,0,0,0,0,1},
    {1,0,0,0,0,0,0,0,0,1},
    {1,0,0,0,0,0,0,0,0,1},
    {1,0,0,0,0,0,0,0,0,1},
    {1,0,0,0,0,0,0,0,0,1},
    {1,0,0,0,0,0,0,0,0,1},
    {1,0,0,0,0,0,0,0,0,1},
    {1,0,0,0,0,0,0,0,0,1},
    {1,0,0,0,0,0,0,0,0,1},
    {1,0,0,0,0,0,0,0,0,1},
    {1,0,0,0,0,0,0,0,0,1},
    {1,0,0,0,0,0,0,0,0,1},
    {1,0,0,0,0,0,0,0,0,1},
    {1,0,0,0,0,0,0,0,0,1},
    {1,0,0,0,0,0,0,0,0,1},
    {1,1,1,1,1,1,1,1,1,1}
};

int Blocks[7][4][4][4] =
{
    {
        {
            {0,0,0,0},
            {0,1,1,1},
            {0,0,1,0},
            {0,0,0,0}
        },

        {
            {0,1,0,0},
            {0,1,1,0},
            {0,1,0,0},
            {0,0,0,0}
        },

        {
            {0,0,1,0},
            {0,1,1,1},
            {0,0,0,0},
            {0,0,0,0}
        },

        {
            {0,0,1,0},
            {0,1,1,0},
            {0,0,1,0},
            {0,0,0,0}
        },
    },//ㅗ

    {
        {
            {0,0,0,0},
            {0,1,1,1},
            {0,0,0,1},
            {0,0,0,0}
        },

        {
            {0,0,0,0},
            {0,1,1,0},
            {0,1,0,0},
            {0,1,0,0}
        },

        {
            {0,0,0,0},
            {0,1,0,0},
            {0,1,1,1},
            {0,0,0,0}
        },

        {
            {0,0,1,0},
            {0,0,1,0},
            {0,1,1,0},
            {0,0,0,0}
        },
    },//ㄱ

    {
        {
            {0,0,0,0},
            {1,1,0,0},
            {0,1,1,0},
            {0,0,0,0}
        },

        {
            {0,0,0,0},
            {0,0,1,0},
            {0,1,1,0},
            {0,1,0,0}
        },

        {
            {0,0,0,0},
            {1,1,0,0},
            {0,1,1,0},
            {0,0,0,0}
        },

        {
            {0,0,0,0},
            {0,0,1,0},
            {0,1,1,0},
            {0,1,0,0}
        },
    },//ㄹ

    {
        {
            {0,0,0,0},
            {0,1,1,0},
            {0,1,1,0},
            {0,0,0,0}
        },

        {
            {0,0,0,0},
            {0,1,1,0},
            {0,1,1,0},
            {0,0,0,0}
        },

        {
            {0,0,0,0},
            {0,1,1,0},
            {0,1,1,0},
            {0,0,0,0}
        },

        {
            {0,0,0,0},
            {0,1,1,0},
            {0,1,1,0},
            {0,0,0,0}
        },
    },//ㅁ

    {
        {
            {0,0,0,0},
            {0,1,1,1},
            {0,1,0,0},
            {0,0,0,0}
        },

        {
            {0,0,0,0},
            {0,1,0,0},
            {0,1,0,0},
            {0,1,1,0}
        },

        {
            {0,0,0,0},
            {0,0,0,1},
            {0,1,1,1},
            {0,0,0,0}
        },

        {
            {0,0,0,0},
            {0,1,1,0},
            {0,0,1,0},
            {0,0,1,0}
        },
    },//ㄴ

    {
        {
            {0,0,0,0},
            {0,0,0,0},
            {1,1,1,1},
            {0,0,0,0}
        },

        {
            {0,1,0,0},
            {0,1,0,0},
            {0,1,0,0},
            {0,1,0,0}
        },

        {
            {0,0,0,0},
            {0,0,0,0},
            {1,1,1,1},
            {0,0,0,0}
        },

        {
            {0,1,0,0},
            {0,1,0,0},
            {0,1,0,0},
            {0,1,0,0}
        },
    },//ㅡ

    {
        {
            {0,0,0,0},
            {0,0,1,1},
            {0,1,1,0},
            {0,0,0,0}
        },

        {
            {0,0,0,0},
            {0,1,0,0},
            {0,1,1,0},
            {0,0,1,0}
        },

        {
            {0,0,0,0},
            {0,0,1,1},
            {0,1,1,0},
            {0,0,0,0}
        },

        {
            {0,0,0,0},
            {0,1,0,0},
            {0,1,1,0},
            {0,0,1,0}
        },
    }//ㄹ반대 
};


void Map()
{

    SetConsoleTextAttribute(GetStdHandle(STD_OUTPUT_HANDLE),
        FOREGROUND_RED | FOREGROUND_BLUE | FOREGROUND_GREEN |
        FOREGROUND_INTENSITY);

    int i = 0;
    int j = 0;

    for (i = 0; i < MAPHEIGHT; i++)
    {
        for (j = 0; j < MAPWIDTH; j++)
        {
            if (map[i][j] == 1)
            {
                gotoxy(j * 2, i);
                printf("□");
            }
        }
        printf("\n");
    }
}

void RandOutput()
{
    int i = 0;
    int j = 0;

    T.x = 6;
    T.y = 0;

    gotoxy(T.x, T.y);

    srand(time(NULL));
    T.randBlocks = rand() % 7;

    SetColor();

    for (i = 0; i < 4; i++)
    {
        gotoxy(T.x, T.y + i);
        for (j = 0; j < 4; j++)
        {
            if (Blocks[T.randBlocks][T.rotation][i][j] == 1)
                printf("■");
            else
                printf("  ");
        }
        printf("\n");
    }
}

void Delete()
{
    int i = 0;
    int j = 0;

    gotoxy(T.x, T.y);

    for (i = 0; i < 4; i++)
    {
        gotoxy(T.x, T.y + i);
        for (j = 0; j < 4; j++)
            printf("  ");
        printf("\n");
    }


    for (i = 0; i < 4; i++)
    {
        gotoxy(S.ShadowX, S.ShadowY + i);
        for (j = 0; j < 4; j++)
            printf("  ");
        printf("\n");
    }
}

void Move()
{
    bool exitOuterLoop = false;

    int i = 0;
    int j = 0;

    for (i = 0; i < 4; i++)        //오른쪽 벽 닿았을때
    {
        for (j = 0; j < 4; j++)
        {
            if (Blocks[T.randBlocks][T.rotation][i][j] == 1)
            {
                if (T.Right == true && map[T.y + i][T.x / 2 + j] == 1)
                {
                    T.x = T.x - 2;
                    T.Right = false;
                    exitOuterLoop = true;
                    break;
                }
            }
        }
        if (exitOuterLoop == true)
        {
            exitOuterLoop = false;
            break;
        }
    }

    for (i = 0; i < 4; i++)        ////왼쪽 벽 닿았을때
    {
        for (j = 0; j < 4; j++)
        {
            if (Blocks[T.randBlocks][T.rotation][i][j] == 1)
            {
                if (T.Left == true && map[T.y + i][T.x / 2 + j] == 1)
                {
                    T.x = T.x + 2;
                    T.Left = false;
                    exitOuterLoop = true;
                    break;
                }
            }
        }
        if (exitOuterLoop == true)
        {
            exitOuterLoop = false;
            break;
        }
    }

    for (i = 0; i < 4; i++)        //아래쪽 벽 닿았을때
    {
        for (j = 0; j < 4; j++)
        {
            if (Blocks[T.randBlocks][T.rotation][i][j] == 1)
            {
                if (map[T.y + i + 1][T.x / 2 + j] == 1)
                {
                    T.save = true;
                    Save();
                    break;
                }
            }
        }

        if (exitOuterLoop == true)
        {
            exitOuterLoop = false;
            break;
        }
    }

    T.Left = 0;
    T.Right = 0;

    Waiting();
    Shadow();
    SetColor();
    Output();
    Map();
}

void Save()
{
    int i = 0;
    int j = 0;

    if (T.save == true)
    {
        for (i = 0; i < 4; i++)
        {
            for (j = 0; j < 4; j++)
            {
                map[T.y + i][T.x / 2 + j] += Blocks[T.randBlocks][T.rotation][i][j];
            }
        }
        LineCheck();
        system("cls");
        RandOutput();
        Score();
        T.save = false;
    }

    GameOver();
}

void TimeDown(int tick)        //시간이 지날때마다 Down
{
    int Millisecond = 500;

    if (T.score > 500)
        Millisecond = 400;

    else if (T.score > 1000)
        Millisecond = 300;

    else if (T.score > 2000)
        Millisecond = 200;

    CurTime = clock();
    if (CurTime - OldTime > Millisecond)
    {
        Delete();
        T.y++;
        Move();
        OldTime = CurTime;
    }
    printf("%d", tick);
}


void LineCheck()
{
    int i = 0;
    int j = 0;

    int Line = 0;
    int Vertical = 0;

    for (i = 0; i < 19; i++)
    {
        for (j = 1; j <= 8; j++)
        {
            if (map[i][j] == 1)
                Line += 1;

            if (Line == 8)
            {
                Vertical = i;
                LineRemove(Vertical);
                LineDown(Vertical);
                T.score += 100;
            }
        }
        Line = 0;
    }
}

void LineRemove(int vertical)
{
    int Remove;
    for (Remove = 1; Remove <= 8; Remove++)
        map[vertical][Remove] = 0;
}

void LineDown(int vertical)
{
    int LinePlus;
    while (vertical > 0)
    {
        for (LinePlus = 1; LinePlus <= 8; LinePlus++)
        {
            map[vertical][LinePlus] += map[vertical - 1][LinePlus];
            map[vertical - 1][LinePlus] = 0;
        }
        vertical--;
    }
}

void Rotation()
{
    bool exitOuterLoop = false;

    int i = 0;
    int j = 0;
    int X = T.x;

    T.rotation = T.rotation + 1;

    if (T.rotation == 4)
        T.rotation = 0;

    for (i = 0; i < 4; i++)
    {
        for (j = 0; j < 4; j++)
        {
            if (Blocks[T.randBlocks][T.rotation][i][j] == 1)
            {
                if (j > 1 && map[T.y + i][T.x / 2 + j] == 1)
                    T.x = T.x - 2;
                else if (j <= 1 && map[T.y + i][T.x / 2 + j] == 1)
                    T.x = T.x + 2;
                else {}
            }
        }
    }

    for (i = 0; i < 4; i++)
    {
        for (j = 0; j < 4; j++)
        {
            if (Blocks[T.randBlocks][T.rotation][i][j] == 1)
            {
                if (map[T.y + i][T.x / 2 + j] == 1)
                {
                    T.x = X;
                    if (T.rotation > 0)
                    {
                        T.rotation = T.rotation - 1;
                        exitOuterLoop = true;
                        break;
                    }
                    if (T.rotation == 0)
                    {
                        T.rotation = 3;
                        exitOuterLoop = true;
                        break;
                    }
                }
            }
        }
        if (exitOuterLoop == true)
        {
            exitOuterLoop = false;
            break;
        }
    }
}

void QuickDown()    //한번에 다운 
{
    int i = 0;
    int j = 0;

    int VerticalLine = 0;
    int VerticalLine2 = 20;
    int distance = 0;

    for (i = 0; i < 4; i++)
    {
        for (j = 0; j < 4; j++)
        {
            if (Blocks[T.randBlocks][T.rotation][i][j] == 1)
            {
                for (VerticalLine = 0; VerticalLine <= 19; VerticalLine++)
                {
                    if (map[T.y + VerticalLine + i][T.x / 2 + j] == 1)
                    {
                        if (VerticalLine2 >= VerticalLine)
                            VerticalLine2 = VerticalLine;
                        distance = VerticalLine2 - 1;
                    }
                }
            }
        }
    }

    T.y = T.y + distance;
}

void GameOver()
{
    int i = 0;
    int j = 0;

    for (i = 0; i < 4; i++)
    {
        for (j = 3; j < 7; j++)
        {
            if (map[i][j] == 1)
            {
                HighScoreSave();
                SetConsoleTextAttribute(GetStdHandle
                (STD_OUTPUT_HANDLE), FOREGROUND_RED |
                    FOREGROUND_BLUE | FOREGROUND_GREEN |
                    FOREGROUND_INTENSITY);
                system("cls");
                gotoxy(50, 15);
                puts("Game Over");
                exit(0);
            }
        }
    }

}

void Output()
{
    int i = 0;
    int j = 0;

    gotoxy(T.x, T.y);

    for (i = 0; i < 4; i++)
    {
        for (j = 0; j < 4; j++)
        {
            gotoxy(T.x + j * 2, T.y + i);
            if (Blocks[T.randBlocks][T.rotation][i][j] == 1)
                printf("■");
        }
        printf("\n");
    }
}

void Explain()
{

    SetConsoleTextAttribute(GetStdHandle(STD_OUTPUT_HANDLE),
        FOREGROUND_RED | FOREGROUND_BLUE | FOREGROUND_GREEN |
        FOREGROUND_INTENSITY);

    gotoxy(60, 10);
    printf("z키 : 회전");

    gotoxy(60, 11);
    puts("↓키 : 아래");

    gotoxy(60, 12);
    puts("→키 : 오른쪽");

    gotoxy(60, 13);
    puts("←키 : 왼쪽");

    gotoxy(60, 14);
    puts("↑키 : 바닥으로");

    gotoxy(60, 15);
    puts("esc키 : 게임종료");
}

void Score()
{
    SetConsoleTextAttribute(GetStdHandle(STD_OUTPUT_HANDLE),
        FOREGROUND_RED | FOREGROUND_BLUE | FOREGROUND_GREEN | FOREGROUND_INTENSITY);
    gotoxy(40, 15);
    printf("점수 : %d", T.score);
}

void Shadow()
{
    SetColor();

    bool ShadowExitOuterLoop = false;

    int i = 0;
    int j = 0;

    S.ShadowX = T.x;

    int VerticalLine = 0;
    int VerticalLine2 = 20;
    int distance = 0;

    for (i = 0; i < 4; i++)
    {
        for (j = 0; j < 4; j++)
        {
            if (Blocks[T.randBlocks][T.rotation][i][j] == 1)
            {
                for (VerticalLine = 0; VerticalLine <= 19; VerticalLine++)
                {
                    if (map[T.y + VerticalLine + i][T.x / 2 + j] == 1)
                    {
                        if (VerticalLine2 >= VerticalLine)
                            VerticalLine2 = VerticalLine;
                        distance = VerticalLine2 - 1;
                    }
                }
            }
        }
    }

    S.ShadowY = T.y + distance;

    for (i = 0; i < 4; i++)
    {
        for (j = 0; j < 4; j++)
        {
            if (Blocks[T.randBlocks][T.rotation][i][j] == 1)
            {
                if (T.Right == 1 && map[T.y + i][T.x / 2 + j] == 1)
                {
                    S.ShadowX = T.x - 2;
                    T.Right = 0;
                    S.ShadowY = T.y + distance;
                    ShadowExitOuterLoop = true;
                    break;
                }
            }
        }
        if (ShadowExitOuterLoop == true)
        {
            ShadowExitOuterLoop = false;
            break;
        }
    }
    for (i = 0; i < 4; i++)
    {
        for (j = 0; j < 4; j++)
        {
            if (Blocks[T.randBlocks][T.rotation][i][j] == 1)
            {
                if (T.Left == 1 && map[T.y + i][T.x / 2 + j] == 1)
                {
                    S.ShadowX = T.x + 2;
                    T.Left = 0;
                    S.ShadowY = T.y + distance;
                    ShadowExitOuterLoop = true;
                    break;
                }
            }
        }
        if (ShadowExitOuterLoop == true)
        {
            ShadowExitOuterLoop = false;
            break;
        }
    }
    ShadowOutput();
}

void ShadowOutput()
{
    int i = 0;
    int j = 0;

    for (i = 0; i < 4; i++)
    {
        for (j = 0; j < 4; j++)
        {
            gotoxy(S.ShadowX + j * 2, S.ShadowY + i);
            if (Blocks[T.randBlocks][T.rotation][i][j] == 1)
                printf("□");
        }
        printf("\n");
    }
    Map();
}

void HighScoreSave()
{
    FILE* fp = fopen("score.txt", "wt");
    if (HighSaveScore < T.score)
        HighSaveScore = T.score;
    fprintf(fp, "%d", HighSaveScore);
}

void HighScoreOutput()
{
    FILE* fp = fopen("score.txt", "rt");

    if (fp == NULL)
    {
        puts("score.txt 파일을 소스코드 c파일 있는 폴더에 만드세요 ㅎㅎ");
        exit(0);
    }

    fscanf(fp, "%d", &HighSaveScore);
    gotoxy(40, 14);
    printf("최고점수 : %d", HighSaveScore);
    fclose(fp);
}

void Waiting()    //깜빡거리는거 줄임
{
    while (1)
    {
        WaitCurTime = clock();
        if (WaitCurTime - WaitOldTime > 33)
        {
            WaitOldTime = WaitCurTime;
            break;
        }
    }
}

int main()
{
    int key = 0;
    int tick = 0;
    OldTime = clock();
    CursorView(0);
    Map();
    RandOutput();

    while (1)
    {
        Score();
        Explain();
        TimeDown(tick++);
        //HighScoreOutput();

        if (_kbhit())
        {
            key = _getch();
            switch (key)
            {
            case DOWN:
                Delete();
                T.y++;
                Move();
                break;
            case LEFT:
                T.Left = true;
                Delete();
                T.x = T.x - 2;
                Move();
                break;
            case RIGHT:
                T.Right = true;
                Delete();
                T.x = T.x + 2;
                Move();
                break;
            case ESCAPE:
                system("cls");
                printf("게임종료"); 
                exit(0);
                break;
            case z:
                Delete();
                Rotation();
                Move();
                break;
            case Z:
                Delete();
                Rotation();
                Move();
                break;
            /*case UP:
                Delete();
                QuickDown();
                Move();
                break;*/
            default:
                break;
            }
        }
    }
    return 0;
}
void gotoxy(int x, int y)
{
    COORD Pos = { x, y };
    SetConsoleCursorPosition(GetStdHandle(STD_OUTPUT_HANDLE), Pos);
}
void CursorView(char show)//커서숨기기
{
    HANDLE hConsole;
    CONSOLE_CURSOR_INFO ConsoleCursor;

    hConsole = GetStdHandle(STD_OUTPUT_HANDLE);

    ConsoleCursor.bVisible = show;
    ConsoleCursor.dwSize = 1;

    SetConsoleCursorInfo(hConsole, &ConsoleCursor);
}
void SetColor()
{
    if (T.randBlocks == 0)
        SetConsoleTextAttribute(GetStdHandle(STD_OUTPUT_HANDLE),
            FOREGROUND_RED | FOREGROUND_BLUE | FOREGROUND_INTENSITY);

    else if (T.randBlocks == 1)
        SetConsoleTextAttribute(GetStdHandle(STD_OUTPUT_HANDLE),
            FOREGROUND_RED | FOREGROUND_INTENSITY);

    else if (T.randBlocks == 2)
        SetConsoleTextAttribute(GetStdHandle(STD_OUTPUT_HANDLE),
            FOREGROUND_GREEN | FOREGROUND_INTENSITY);

    else if (T.randBlocks == 3)
        SetConsoleTextAttribute(GetStdHandle(STD_OUTPUT_HANDLE),
            FOREGROUND_RED | FOREGROUND_GREEN | FOREGROUND_INTENSITY);

    else if (T.randBlocks == 4)
        SetConsoleTextAttribute(GetStdHandle(STD_OUTPUT_HANDLE),
            FOREGROUND_BLUE | FOREGROUND_INTENSITY);

    else if (T.randBlocks == 5)
        SetConsoleTextAttribute(GetStdHandle(STD_OUTPUT_HANDLE),
            FOREGROUND_BLUE | FOREGROUND_GREEN | FOREGROUND_INTENSITY);

    else
        SetConsoleTextAttribute(GetStdHandle(STD_OUTPUT_HANDLE),
            FOREGROUND_RED | FOREGROUND_BLUE | FOREGROUND_GREEN |
            FOREGROUND_INTENSITY);
}
